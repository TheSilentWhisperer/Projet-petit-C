### Starting build.
# Target: petitc.ml.depends, tags: { extension:ml, file:petitc.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules petitc.ml > petitc.ml.depends
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet, traverse, use_menhir }
ocamllex.opt -q lexer.mll
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules lexer.ml > lexer.ml.depends
# Target: parser.mly.depends, tags: { extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, traverse, use_menhir }
menhir --raw-depend --ocamldep 'ocamldep.opt -modules' parser.mly > parser.mly.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules ast.ml > ast.ml.depends
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -o ast.cmo ast.ml
# Target: parser.mly, tags: { byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet, traverse, use_menhir }
menhir --ocamlc ocamlc.opt --infer parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -o parser.cmi parser.mli
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -o lexer.cmo lexer.ml
# Target: petitc.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:petitc.cmo, file:petitc.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -o petitc.cmo petitc.ml
+ ocamlc.opt -c -o petitc.cmo petitc.ml
File "petitc.ml", line 51, characters 10-13:
51 |       let ast = Parser.program Lexer.token lexbuf in
               ^^^
Warning 26: unused variable ast.
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules parser.ml > parser.ml.depends
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -o ast.cmx ast.ml
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -o parser.cmx parser.ml
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -o lexer.cmx lexer.ml
# Target: petitc.cmx, tags: { compile, extension:cmx, extension:ml, file:petitc.cmx, file:petitc.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -o petitc.cmx petitc.ml
+ ocamlopt.opt -c -o petitc.cmx petitc.ml
File "petitc.ml", line 51, characters 10-13:
51 |       let ast = Parser.program Lexer.token lexbuf in
               ^^^
Warning 26: unused variable ast.
# Target: petitc.native, tags: { dont_link_with, extension:native, file:petitc.native, link, native, ocaml, program, quiet, traverse, use_menhir }
ocamlopt.opt ast.cmx parser.cmx lexer.cmx petitc.cmx -o petitc.native
# Compilation successful.
